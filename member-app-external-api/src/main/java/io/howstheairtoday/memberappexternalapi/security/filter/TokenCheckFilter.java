package io.howstheairtoday.memberappexternalapi.security.filter;

import java.io.IOException;
import java.util.Map;

import org.springframework.web.filter.OncePerRequestFilter;

import io.howstheairtoday.memberappexternalapi.exception.AccessTokenException;
import io.howstheairtoday.memberappexternalapi.security.util.JWTUtil;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;

/**
 * JWT Ïù∏Ï¶ù ÌïÑÌÑ∞
 */
@Log4j2
@RequiredArgsConstructor
public class TokenCheckFilter extends OncePerRequestFilter {

    private final JWTUtil jwtUtil;

    // Access TokenÏùÑ Í≤ÄÏ¶ùÌïòÎäî Î©îÏÑúÎìú
    private Map<String, Object> validateAccessToken(HttpServletRequest request) throws AccessTokenException {

        String headerStr = request.getHeader("Authorization");
        if (headerStr == null || headerStr.length() < 8) {
            // Authorization Ìó§ÎçîÏùò Í∞íÏù¥ null Ïù¥Í±∞ÎÇò Í∏∏Ïù¥Í∞Ä 8 ÎØ∏ÎßåÏù∏ Í≤ΩÏö∞,
            // Ïú†Ìö®Ìïú JWT ÌÜ†ÌÅ∞Ïù¥ ÏïÑÎãàÎØÄÎ°ú AccessTokenException ÏòàÏô∏Î•º Î∞úÏÉù
            // - Authorization Ìó§ÎçîÏùò Í∞íÏùÄ Î≥¥ÌÜµ "Bearer [JWT Token]" ÌòïÏãùÏúºÎ°ú Íµ¨ÏÑ±
            // - "Bearer " (BearerÏôÄ Í≥µÎ∞±)Î•º Ìè¨Ìï®Ìïú ÏµúÏÜå 8ÏûêÎ¶¨Ïùò Î¨∏ÏûêÏó¥Ïù¥ ÌïÑÏöî
            throw new AccessTokenException(AccessTokenException.TOKEN_ERROR.UNACCEPT);
        }

        String tokenType = headerStr.substring(0, 6);
        String tokenStr = headerStr.substring(7);

        if (tokenType.equalsIgnoreCase("Bearer") == false) {
            // Bearer ÌÜ†ÌÅ∞ Ïú†ÌòïÏù¥ ÏïÑÎãå Í≤ΩÏö∞ AccessTokenException ÏòàÏô∏Í∞Ä Î∞úÏÉù
            // - Ìó§Îçî Í∞íÏóêÏÑú BearerÍ∞Ä ÏóÜÍ±∞ÎÇò ÎåÄÏÜåÎ¨∏ÏûêÍ∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÎäî Í≤ΩÏö∞
            throw new AccessTokenException(AccessTokenException.TOKEN_ERROR.BADTYPE);
        }

        try {
            Map<String, Object> values = jwtUtil.validateToken(tokenStr);
            return values;
        } catch (MalformedJwtException malformedJwtException) {
            log.error("üö® MalformedJwtException -------------------- üö®");
            throw new AccessTokenException(AccessTokenException.TOKEN_ERROR.MALFORM);
        }catch(SignatureException signatureException){
            log.error("üö® SignatureException -------------------- üö®");
            throw new AccessTokenException(AccessTokenException.TOKEN_ERROR.BADSIGN);
        }catch(ExpiredJwtException expiredJwtException){
            log.error("üö® ExpiredJwtException -------------------- üö®");
            throw new AccessTokenException(AccessTokenException.TOKEN_ERROR.EXPIRED);
        }
    }

    @Override
    protected void doFilterInternal(
        HttpServletRequest request,
        HttpServletResponse response,
        FilterChain filterChain) throws IOException, ServletException {
        String path = request.getRequestURI();
        /**
         * /api/Î°ú ÏãúÏûëÌïòÎäî Î™®Îì† Í≤ΩÎ°úÏùò Ìò∏Ï∂úÏóê ÏÇ¨Ïö©ÎêòÍ≥† ÏÇ¨Ïö©ÏûêÎäî Ìï¥Îãπ Í≤ΩÎ°úÏóê Îã§ÏùåÍ≥º Í∞ôÏùÄ ÏÉÅÌô©ÏúºÎ°ú Ï†ëÍ∑º
         * [1] Access TokenÏù¥ ÏóÜÎäî Í≤ΩÏö∞ - ÌÜ†ÌÅ∞Ïù¥ ÏóÜÎã§Îäî Î©îÏãúÏßÄ Ï†ÑÎã¨
         * [2] Access TokenÏù¥ ÏûòÎ™ªÎêú Í≤ΩÏö∞(ÏÑúÎ™Ö ÌòπÏùÄ Íµ¨ÏÑ±, Í∏∞ÌÉÄ ÏóêÎü¨) - ÏûòÎ™ªÎêú ÌÜ†ÌÅ∞Ïù¥ÎùºÎäî Î©îÏãúÏßÄ Ï†ÑÎã¨
         * [3] Access TokenÏù¥ Ï°¥Ïû¨ÌïòÏßÄÎßå Ïò§ÎûòÎêú(expired) Í∞íÏù∏ Í≤ΩÏö∞ - ÌÜ†ÌÅ∞ÏùÑ Í∞±Ïã†ÌïòÎùºÎäî Î©îÏãúÏßÄ Ï†ÑÎã¨
         */
        if (!path.startsWith("/api/")) {
            filterChain.doFilter(request, response);
            return;
        }
        log.info("üõ†Ô∏è Token Check Filter -------------------- üõ†Ô∏è");
        log.info("üí° JWTUtil =====> " + jwtUtil);

        try {
            validateAccessToken(request);
            filterChain.doFilter(request, response);
        } catch (AccessTokenException accessTokenException) {
            accessTokenException.sendResponseError(response);
        }
    }
}
