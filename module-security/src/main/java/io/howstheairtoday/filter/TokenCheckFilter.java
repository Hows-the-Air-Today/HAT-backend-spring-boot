package io.howstheairtoday.filter;

import java.io.IOException;
import java.util.Map;

import org.springframework.web.filter.OncePerRequestFilter;

import io.howstheairtoday.exception.AccessTokenException;
import io.howstheairtoday.util.JwtUtil;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;

@Log4j2
@RequiredArgsConstructor
public class TokenCheckFilter extends OncePerRequestFilter {

    private final JwtUtil jwtUtil;

    // Access TokenÏùÑ Í≤ÄÏ¶ùÌïòÎäî Î©îÏÑúÎìú
    private Map<String, Object> validateAccessToken(HttpServletRequest request) throws AccessTokenException {

        String headerStr = request.getHeader("Authorization");
        if (headerStr == null || headerStr.length() < 8) {
            // Authorization Ìó§ÎçîÏùò Í∞íÏù¥ null Ïù¥Í±∞ÎÇò Í∏∏Ïù¥Í∞Ä 8 ÎØ∏ÎßåÏù∏ Í≤ΩÏö∞,
            // Ïú†Ìö®Ìïú JWT ÌÜ†ÌÅ∞Ïù¥ ÏïÑÎãàÎØÄÎ°ú AccessTokenException ÏòàÏô∏Î•º Î∞úÏÉù
            // - Authorization Ìó§ÎçîÏùò Í∞íÏùÄ Î≥¥ÌÜµ "Bearer [JWT Token]" ÌòïÏãùÏúºÎ°ú Íµ¨ÏÑ±
            // - "Bearer " (BearerÏôÄ Í≥µÎ∞±)Î•º Ìè¨Ìï®Ìïú ÏµúÏÜå 8ÏûêÎ¶¨Ïùò Î¨∏ÏûêÏó¥Ïù¥ ÌïÑÏöî
            throw new AccessTokenException(AccessTokenException.TOKEN_ERROR.UNACCEPT);
        }

        String tokenType = headerStr.substring(0, 6);
        String tokenStr = headerStr.substring(7);

        if (tokenType.equalsIgnoreCase("Bearer") == false) {
            // Bearer ÌÜ†ÌÅ∞ Ïú†ÌòïÏù¥ ÏïÑÎãå Í≤ΩÏö∞ AccessTokenException ÏòàÏô∏Í∞Ä Î∞úÏÉù
            // - Ìó§Îçî Í∞íÏóêÏÑú BearerÍ∞Ä ÏóÜÍ±∞ÎÇò ÎåÄÏÜåÎ¨∏ÏûêÍ∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÎäî Í≤ΩÏö∞
            throw new AccessTokenException(AccessTokenException.TOKEN_ERROR.BADTYPE);
        }

        try {
            Map<String, Object> values = jwtUtil.validateToken(tokenStr);
            return values;
        } catch (MalformedJwtException malformedJwtException) {
            log.error("üö® MalformedJwtException -------------------- üö®");
            throw new AccessTokenException(AccessTokenException.TOKEN_ERROR.MALFORM);
        }catch(SignatureException signatureException){
            log.error("üö® SignatureException -------------------- üö®");
            throw new AccessTokenException(AccessTokenException.TOKEN_ERROR.BADSIGN);
        }catch(ExpiredJwtException expiredJwtException){
            log.error("üö® ExpiredJwtException -------------------- üö®");
            throw new AccessTokenException(AccessTokenException.TOKEN_ERROR.EXPIRED);
        }
    }

    @Override
    protected void doFilterInternal(
        HttpServletRequest request,
        HttpServletResponse response,
        FilterChain filterChain) throws IOException, ServletException {
        String path = request.getRequestURI();
        /**
         * [1] ÏöîÏ≤≠ Í≤ΩÎ°úÍ∞Ä "/api/"Î°ú ÏãúÏûëÌïòÎäî Í≤ΩÏö∞ÏóêÎßå ÌïÑÌÑ∞ÎßÅÏùÑ ÏàòÌñâ
         * Ï∞∏Í≥†: path.startsWith("/api/v1/post/") = /api/v1/post/Î°ú ÏãúÏûëÌïòÎäî URL Í≤ΩÎ°ú Ï†ëÍ∑º Î™®Îëê ÌóàÏö©
         * [2] Request HeaderÏóêÏÑú "Authorization" Ìó§ÎçîÎ•º Ï∞æÏïÑ JWT ÌÜ†ÌÅ∞ÏùÑ Ï∂îÏ∂ú
         * [3] Ï∂îÏ∂úÌïú JWT ÌÜ†ÌÅ∞Ïùò Ïú†Ìö®ÏÑ±ÏùÑ Í≤ÄÏÇ¨
         * [4] ÌÜ†ÌÅ∞Ïù¥ Ïú†Ìö®Ìïú Í≤ΩÏö∞, Ï∂îÏ∂úÌïú ÌÜ†ÌÅ∞ÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Ï∂îÏ∂úÌïòÏó¨ SecurityContextÏóê Ï†ÄÏû•
         * [5] Ïú†Ìö®Ìïú ÌÜ†ÌÅ∞Ïù¥ ÏïÑÎãå Í≤ΩÏö∞, 401 Unauthorized ÏùëÎãµÏùÑ Î≥¥ÎÉÖÎãàÎã§.
         */
        if (path.startsWith("/api/v1/post/") || // TODO: PostÏôÄ Member Í∞úÎ∞ú ÏôÑÎ£å ÌõÑ Ï†úÍ±∞
            path.startsWith("/api/v1/airquality/") ||
            path.startsWith("/api/v1/auth/register")) {
            filterChain.doFilter(request, response);
            return;
        }

        if (!path.startsWith("/api/")) {
            filterChain.doFilter(request, response);
            return;
        }

        log.info("üõ†Ô∏è Token Check Filter -------------------- üõ†Ô∏è");
        log.info("üí° JWTUtil =====> " + jwtUtil);

        try {
            validateAccessToken(request);
            filterChain.doFilter(request, response);
        } catch (AccessTokenException accessTokenException) {
            accessTokenException.sendResponseError(response);
        }
    }
}